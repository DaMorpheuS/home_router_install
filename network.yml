---
- name: Configure network settings for router
  hosts: routers
  become: yes
  
  tasks:
    - name: Gather distribution facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always
    
    - name: Check if required network utilities are installed
      ansible.builtin.command: dpkg -l systemd iproute2 net-tools ethtool
      register: network_packages_check
      changed_when: false
      failed_when: network_packages_check.rc != 0
      tags: packages
      
    - name: Disable old networking service (if exists)
      ansible.builtin.systemd:
        name: networking
        enabled: no
        state: stopped
      tags: packages
      ignore_errors: yes
      
    - name: Enable systemd-networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        enabled: yes
        state: started
      tags: packages
      
    - name: Enable systemd-networkd-wait-online service
      ansible.builtin.systemd:
        name: systemd-networkd-wait-online
        enabled: yes
      tags: packages
      
    - name: Configure global IPv4 forwarding in networkd.conf
      ansible.builtin.ini_file:
        path: /etc/systemd/networkd.conf
        section: Network
        option: IPv4Forwarding
        value: 'true'
        create: yes
        mode: '0644'
      notify: restart networkd
      tags: packages
      
    - name: Load 8021q kernel module for VLAN support
      ansible.builtin.modprobe:
        name: 8021q
        state: present
      tags: packages
      
    - name: Ensure 8021q module loads on boot
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: '8021q'
        create: yes
        mode: '0644'
      tags: packages
      
    - name: Gather network interface facts
      ansible.builtin.setup:
        gather_subset:
          - network
      tags: facts
      
    - name: Display available network interfaces
      ansible.builtin.debug:
        msg: "Available interfaces: {{ ansible_interfaces }}"
      tags: facts
      
    - name: Create systemd-networkd directory
      ansible.builtin.file:
        path: /etc/systemd/network
        state: directory
        mode: '0755'
      tags: configure
      
    - name: Configure physical interface ({{ physical_interface }})
      ansible.builtin.copy:
        dest: /etc/systemd/network/10-{{ physical_interface }}.network
        content: |
          [Match]
          Name={{ physical_interface }}
          
          [Link]
          RequiredForOnline=no
          
          [Network]
          VLAN={{ vlan2_interface }}
          {% if vlan3_interface is defined %}VLAN={{ vlan3_interface }}{% endif %}
          
          {% if vlan4_interface is defined %}VLAN={{ vlan4_interface }}{% endif %}
          
          {% if vlan5_interface is defined %}VLAN={{ vlan5_interface }}{% endif %}
          
          IPv4Forwarding=yes
        mode: '0644'
      notify: restart networkd
      tags: configure
      
    - name: Configure VLAN 2 interface (Main Network)
      ansible.builtin.copy:
        dest: /etc/systemd/network/20-{{ vlan2_interface }}.netdev
        content: |
          [NetDev]
          Name={{ vlan2_interface }}
          Kind=vlan
          
          [VLAN]
          Id=2
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan2_interface is defined
      
    - name: Configure VLAN 2 network
      ansible.builtin.copy:
        dest: /etc/systemd/network/20-{{ vlan2_interface }}.network
        content: |
          [Match]
          Name={{ vlan2_interface }}
          
          [Network]
          Address={{ vlan2_ip }}/24
          IPv4Forwarding=yes
          
          [Link]
          RequiredForOnline=yes
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan2_interface is defined and vlan2_ip is defined
      
    - name: Configure VLAN 3 netdev
      ansible.builtin.copy:
        dest: /etc/systemd/network/30-{{ vlan3_interface }}.netdev
        content: |
          [NetDev]
          Name={{ vlan3_interface }}
          Kind=vlan
          
          [VLAN]
          Id=3
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan3_interface is defined
      
    - name: Configure VLAN 3 network
      ansible.builtin.copy:
        dest: /etc/systemd/network/30-{{ vlan3_interface }}.network
        content: |
          [Match]
          Name={{ vlan3_interface }}
          
          [Network]
          Address={{ vlan3_ip }}/24
          IPv4Forwarding=yes
          
          [Link]
          RequiredForOnline=carrier
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan3_interface is defined and vlan3_ip is defined
      
    - name: Configure VLAN 4 netdev
      ansible.builtin.copy:
        dest: /etc/systemd/network/40-{{ vlan4_interface }}.netdev
        content: |
          [NetDev]
          Name={{ vlan4_interface }}
          Kind=vlan
          
          [VLAN]
          Id=4
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan4_interface is defined
      
    - name: Configure VLAN 4 network
      ansible.builtin.copy:
        dest: /etc/systemd/network/40-{{ vlan4_interface }}.network
        content: |
          [Match]
          Name={{ vlan4_interface }}
          
          [Network]
          Address={{ vlan4_ip }}/24
          IPv4Forwarding=yes
          
          [Link]
          RequiredForOnline=carrier
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan4_interface is defined and vlan4_ip is defined
      
    - name: Configure VLAN 5 netdev
      ansible.builtin.copy:
        dest: /etc/systemd/network/50-{{ vlan5_interface }}.netdev
        content: |
          [NetDev]
          Name={{ vlan5_interface }}
          Kind=vlan
          
          [VLAN]
          Id=5
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan5_interface is defined
      
    - name: Configure VLAN 5 network
      ansible.builtin.copy:
        dest: /etc/systemd/network/50-{{ vlan5_interface }}.network
        content: |
          [Match]
          Name={{ vlan5_interface }}
          
          [Network]
          Address={{ vlan5_ip }}/24
          IPv4Forwarding=yes
          
          [Link]
          RequiredForOnline=carrier
        mode: '0644'
      notify: restart networkd
      tags: configure
      when: vlan5_interface is defined and vlan5_ip is defined
      
    - name: Enable IP forwarding (required for routing)
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      tags: routing
      
    - name: Disable IPv6 (optional, uncomment if needed)
      ansible.posix.sysctl:
        name: "{{ item }}"
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      loop:
        - net.ipv6.conf.all.disable_ipv6
        - net.ipv6.conf.default.disable_ipv6
      tags: 
        - routing
        - ipv6
      when: false  # Set to true if you want to disable IPv6
      
    - name: Check if physical interface exists
      ansible.builtin.command: ip link show {{ physical_interface }}
      register: physical_check
      ignore_errors: yes
      changed_when: false
      tags: validate
      
    - name: Display physical interface status
      ansible.builtin.debug:
        msg: "Physical interface {{ physical_interface }} status: {{ 'EXISTS' if physical_check.rc == 0 else 'NOT FOUND' }}"
      tags: validate
      
    - name: Check if VLAN 2 interface exists
      ansible.builtin.command: ip link show {{ vlan2_interface }}
      register: vlan2_check
      ignore_errors: yes
      changed_when: false
      tags: validate
      when: vlan2_interface is defined
      
    - name: Display VLAN 2 status
      ansible.builtin.debug:
        msg: "VLAN 2 interface {{ vlan2_interface }} status: {{ 'EXISTS' if vlan2_check.rc == 0 else 'NOT FOUND' }}"
      tags: validate
      when: vlan2_interface is defined
      
    - name: Check if VLAN 3 interface exists
      ansible.builtin.command: ip link show {{ vlan3_interface }}
      register: vlan3_check
      ignore_errors: yes
      changed_when: false
      tags: validate
      when: vlan3_interface is defined
      
    - name: Display VLAN 3 status
      ansible.builtin.debug:
        msg: "VLAN 3 interface {{ vlan3_interface }} status: {{ 'EXISTS' if vlan3_check.rc == 0 else 'NOT FOUND' }}"
      tags: validate
      when: vlan3_interface is defined
      
    - name: Check if VLAN 4 interface exists
      ansible.builtin.command: ip link show {{ vlan4_interface }}
      register: vlan4_check
      ignore_errors: yes
      changed_when: false
      tags: validate
      when: vlan4_interface is defined
      
    - name: Display VLAN 4 status
      ansible.builtin.debug:
        msg: "VLAN 4 interface {{ vlan4_interface }} status: {{ 'EXISTS' if vlan4_check.rc == 0 else 'NOT FOUND' }}"
      tags: validate
      when: vlan4_interface is defined
      
    - name: Check if VLAN 5 interface exists
      ansible.builtin.command: ip link show {{ vlan5_interface }}
      register: vlan5_check
      ignore_errors: yes
      changed_when: false
      tags: validate
      when: vlan5_interface is defined
      
    - name: Display VLAN 5 status
      ansible.builtin.debug:
        msg: "VLAN 5 interface {{ vlan5_interface }} status: {{ 'EXISTS' if vlan5_check.rc == 0 else 'NOT FOUND' }}"
      tags: validate
      when: vlan5_interface is defined
      
  handlers:
    - name: restart networkd
      ansible.builtin.systemd:
        name: systemd-networkd
        state: restarted
      # Note: This may temporarily affect network connectivity

