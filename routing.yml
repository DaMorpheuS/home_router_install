---
- name: Configure routing and firewall rules for router using nftables
  hosts: router
  become: yes
  
  vars:
    # WAN interface - for internet access
    wan_interface: ppp0
    
    # Network definitions
    main_network: 192.168.2.0/24
    main_interface: enp3s0
    
    vlan3_network: 192.168.3.0/24
    vlan3_interface: enp3s0.3
    
    vlan4_network: 192.168.4.0/24
    vlan4_interface: enp3s0.4
    
  tasks:
    - name: Gather distribution facts
      ansible.builtin.setup:
        gather_subset:
          - distribution
      tags: always
      
    - name: Install nftables (Trixie)
      ansible.builtin.command: apt-get install -y nftables
      tags: packages
      register: trixie_nftables_install
      changed_when: "'0 upgraded, 0 newly installed' not in trixie_nftables_install.stdout"
      when: ansible_distribution == "Debian" and ansible_distribution_release == "trixie"
      
    - name: Install nftables (non-Trixie)
      ansible.builtin.apt:
        name:
          - nftables
        state: present
        update_cache: yes
      tags: packages
      when: ansible_distribution != "Debian" or ansible_distribution_release != "trixie"
    
    - name: Ensure IP forwarding is enabled
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      tags: routing
      
    - name: Create nftables configuration
      ansible.builtin.copy:
        dest: /etc/nftables.conf
        mode: '0644'
        content: |
          #!/usr/sbin/nft -f
          # Routing and Firewall Rules for Home Router
          # Generated by Ansible
          
          # Flush all existing rules
          flush ruleset
          
          # Define variables for networks and interfaces
          define MAIN_NET = {{ main_network }}
          define VLAN3_NET = {{ vlan3_network }}
          define VLAN4_NET = {{ vlan4_network }}
          
          # Main table for filtering and NAT
          table inet filter {
              
              # INPUT chain - traffic destined for the router itself
              chain input {
                  type filter hook input priority filter; policy accept;
                  
                  # Allow loopback
                  iif lo accept
                  
                  # Allow established and related connections
                  ct state established,related accept
                  
                  # Allow ICMP (ping) from local networks
                  ip saddr { $MAIN_NET, $VLAN3_NET, $VLAN4_NET } icmp type echo-request accept
                  
                  # Allow SSH from all local networks (for management)
                  ip saddr { $MAIN_NET, $VLAN3_NET, $VLAN4_NET } tcp dport 22 accept
                  
                  # Allow DNS from local networks
                  ip saddr { $MAIN_NET, $VLAN3_NET, $VLAN4_NET } udp dport 53 accept
                  ip saddr { $MAIN_NET, $VLAN3_NET, $VLAN4_NET } tcp dport 53 accept
                  
                  # Allow DHCP from local networks
                  udp dport { 67, 68 } accept
                  
                  # Log other input (optional, for debugging)
                  # log prefix "INPUT-dropped: "
              }
              
              # FORWARD chain - traffic passing through the router
              chain forward {
                  type filter hook forward priority filter; policy drop;
                  
                  # Allow established and related connections
                  ct state established,related accept
                  
                # === Main Network (192.168.2.0/24) - Full Access ===
                # Main network can access VLAN 3
                ip saddr $MAIN_NET ip daddr $VLAN3_NET accept
                
                # Main network can access VLAN 4
                ip saddr $MAIN_NET ip daddr $VLAN4_NET accept
                
                # Main network can access internet
                ip saddr $MAIN_NET oifname "{{ wan_interface }}" accept
                
                # === VLAN 3 (192.168.3.0/24) - Isolated + Internet ===
                # VLAN 3 can access internet
                ip saddr $VLAN3_NET oifname "{{ wan_interface }}" accept
                
                # VLAN 3 can reach main network (for responses)
                ip saddr $VLAN3_NET ip daddr $MAIN_NET accept
                
                # Block VLAN 3 to VLAN 4
                ip saddr $VLAN3_NET ip daddr $VLAN4_NET drop
                
                # === VLAN 4 (192.168.4.0/24) - Isolated + Internet ===
                # VLAN 4 can access internet
                ip saddr $VLAN4_NET oifname "{{ wan_interface }}" accept
                
                # VLAN 4 can reach main network (for responses)
                ip saddr $VLAN4_NET ip daddr $MAIN_NET accept
                
                # Block VLAN 4 to VLAN 3
                ip saddr $VLAN4_NET ip daddr $VLAN3_NET drop
                  
                  # Log dropped packets (optional, for debugging)
                  # log prefix "FORWARD-dropped: "
                  
                  # Default policy is drop (set above)
              }
              
              # OUTPUT chain - traffic originating from the router
              chain output {
                  type filter hook output priority filter; policy accept;
              }
          }
          
          # NAT table for masquerading
          table ip nat {
              chain postrouting {
                  type nat hook postrouting priority srcnat; policy accept;
                  
                  # Masquerade all local networks going to internet
                  ip saddr $MAIN_NET oifname "{{ wan_interface }}" masquerade
                  ip saddr $VLAN3_NET oifname "{{ wan_interface }}" masquerade
                  ip saddr $VLAN4_NET oifname "{{ wan_interface }}" masquerade
              }
          }
      tags: firewall
      
    - name: Flush existing nftables rules
      ansible.builtin.command: nft flush ruleset
      ignore_errors: yes
      changed_when: false
      tags: firewall
      
    - name: Apply nftables configuration manually
      ansible.builtin.command: nft -f /etc/nftables.conf
      register: nftables_apply
      changed_when: true
      ignore_errors: yes
      tags: firewall
      
    - name: Display nftables apply result
      ansible.builtin.debug:
        var: nftables_apply
      tags: firewall
      
    - name: Enable nftables service (will load on boot)
      ansible.builtin.systemd:
        name: nftables
        enabled: yes
      tags: firewall
      ignore_errors: yes
      
    - name: Display current nftables ruleset
      ansible.builtin.command: nft list ruleset
      register: nft_rules
      changed_when: false
      tags: validate
      
    - name: Show nftables rules
      ansible.builtin.debug:
        var: nft_rules.stdout_lines
      tags: validate
      
    - name: Create routing information file
      ansible.builtin.copy:
        dest: /etc/router-info.txt
        mode: '0644'
        content: |
          Home Router Configuration
          =========================
          
          Network Layout:
          - Main Network:  {{ main_network }} ({{ main_interface }})
          - VLAN 3:        {{ vlan3_network }} ({{ vlan3_interface }})
          - VLAN 4:        {{ vlan4_network }} ({{ vlan4_interface }})
          - WAN:           {{ wan_interface }}
          
          Routing Rules (nftables):
          1. All networks have internet access through {{ wan_interface }}
          2. Main network ({{ main_network }}) can access all VLANs
          3. VLAN 3 ({{ vlan3_network }}) is isolated - only internet and own VLAN
          4. VLAN 4 ({{ vlan4_network }}) is isolated - only internet and own VLAN
          5. VLAN 3 and VLAN 4 cannot communicate with each other
          
          Management Commands:
          - View all rules:          nft list ruleset
          - View filter table:       nft list table inet filter
          - View NAT table:          nft list table ip nat
          - View FORWARD chain:      nft list chain inet filter forward
          - Reload configuration:    nft -f /etc/nftables.conf
          - Service status:          systemctl status nftables
          - Enable service:          systemctl enable nftables
          - Restart service:         systemctl restart nftables
          
          Configuration file: /etc/nftables.conf
      tags: documentation
      
    - name: Test routing from VLAN 3 (optional)
      ansible.builtin.debug:
        msg: |
          To test VLAN 3 isolation, from a device on VLAN 3:
          - ping 192.168.3.1 (gateway) - should work
          - ping 8.8.8.8 (internet) - should work
          - ping 192.168.2.x (main network) - should work
          - ping 192.168.4.x (VLAN 4) - should FAIL
      tags: testing
      
    - name: Test routing from VLAN 4 (optional)
      ansible.builtin.debug:
        msg: |
          To test VLAN 4 isolation, from a device on VLAN 4:
          - ping 192.168.4.1 (gateway) - should work
          - ping 8.8.8.8 (internet) - should work
          - ping 192.168.2.x (main network) - should work
          - ping 192.168.3.x (VLAN 3) - should FAIL
      tags: testing
